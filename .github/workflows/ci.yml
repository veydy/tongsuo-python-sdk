# name: CI
# on:
#   pull_request: {}
#   push:
#     branches:
#       - main
#       - '*.*.x'
#     tags:
#       - '*.*'
#       - '*.*.*'

# permissions:
#   contents: read

# concurrency:
#   group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
#   cancel-in-progress: true

# jobs:
#   linux:
#     runs-on: ubuntu-20.04
#     strategy:
#       fail-fast: false
#       matrix:
#         PYTHON:
#           - {VERSION: "3.11", TOXENV: "py311", TONGSUO: {VERSION: "8.3.1"}}
#           - {VERSION: "3.11", TOXENV: "flake", TONGSUO: {VERSION: "8.3.2"}}
#           - {VERSION: "3.11", TOXENV: "py311-randomorder", TONGSUO: {VERSION: "8.3.2"}}
#           - {VERSION: "3.11", TOXENV: "py311", TONGSUO: {VERSION: "8.3.2"}}
#           - {VERSION: "3.10", TOXENV: "py310", TONGSUO: {VERSION: "8.3.2"}}
#           - {VERSION: "3.9", TOXENV: "py39", TONGSUO: {VERSION: "8.3.2"}}
#           - {VERSION: "3.8", TOXENV: "py38", TONGSUO: {VERSION: "8.3.2"}}
#           - {VERSION: "3.7", TOXENV: "py37", TONGSUO: {VERSION: "8.3.2"}}
#           - {VERSION: "3.6", TOXENV: "py36", TONGSUO: {VERSION: "8.3.2"}}
#     name: "${{ matrix.PYTHON.TOXENV }} tongsuo-${{ matrix.PYTHON.TONGSUO.VERSION }} on Linux"
#     timeout-minutes: 15
#     steps:
#       - uses: actions/checkout@v3.1.0
#         timeout-minutes: 3
#         with:
#           persist-credentials: false
#       - name: Setup python
#         id: setup-python
#         uses: actions/setup-python@v4.3.0
#         with:
#           python-version: ${{ matrix.PYTHON.VERSION }}
#       - run: python -m pip install tox coverage[toml]
#       - name: Set TONGSUO_HOME
#         shell: bash
#         run: echo "TONGSUO_HOME=${GITHUB_WORKSPACE}/tongsuo${VERSION}" >> $GITHUB_ENV
#         env:
#           VERSION: ${{ matrix.PYTHON.TONGSUO.VERSION }}
#       - name: Build custom Tongsuo
#         working-directory: ${{ runner.temp }}
#         run: |
#           wget "https://github.com/Tongsuo-Project/Tongsuo/archive/refs/tags/${VERSION}.tar.gz"
#           tar zxf "${VERSION}.tar.gz"
#           pushd "Tongsuo-${VERSION}"
#           ./config enable-ntls no-shared --prefix=${TONGSUO_HOME}
#           make -s -j4
#           make install_sw
#           popd
#         env:
#           VERSION: ${{ matrix.PYTHON.TONGSUO.VERSION }}
#       - name: Tests
#         run: |
#           tox -vvv -r --  --color=yes
#         env:
#           TOXENV: ${{ matrix.PYTHON.TOXENV }}

#       - uses: ./.github/actions/upload-coverage

#   macos:
#     runs-on: macos-12
#     strategy:
#       fail-fast: false
#       matrix:
#         PYTHON:
#           - {VERSION: "3.6", TOXENV: "py36", TONGSUO: {VERSION: "8.3.2"}}
#           - {VERSION: "3.10", TOXENV: "py310", TONGSUO: {VERSION: "8.3.2"}}
#     name: "${{ matrix.PYTHON.TOXENV }} tongsuo-${{ matrix.PYTHON.TONGSUO.VERSION }} on macOS"
#     timeout-minutes: 15
#     steps:
#       - uses: actions/checkout@v3.1.0
#         timeout-minutes: 3
#         with:
#           persist-credentials: false
#       - name: Setup python
#         id: setup-python
#         uses: actions/setup-python@v4.3.0
#         with:
#           python-version: ${{ matrix.PYTHON.VERSION }}
#       - run: python -m pip install tox coverage[toml]
#       - name: Set TONGSUO_HOME
#         shell: bash
#         run: echo "TONGSUO_HOME=${GITHUB_WORKSPACE}/tongsuo${VERSION}" >> $GITHUB_ENV
#         env:
#           VERSION: ${{ matrix.PYTHON.TONGSUO.VERSION }}
#       - name: Build custom Tongsuo
#         run: |
#           wget "https://github.com/Tongsuo-Project/Tongsuo/archive/refs/tags/${VERSION}.tar.gz"
#           tar zxf "${VERSION}.tar.gz"
#           pushd "Tongsuo-${VERSION}"
#           ./config enable-ntls no-shared --prefix=${TONGSUO_HOME}
#           make -s -j4
#           make install_sw
#           popd
#         env:
#           VERSION: ${{ matrix.PYTHON.TONGSUO.VERSION }}
#       - name: Tests
#         run: |
#           # delete openssl/include installed in macos-12, fix cffi compile failed
#           rm -rf /usr/local/opt/openssl@1.1/include
#           tox -vvv -r --  --color=yes
#         env:
#           TOXENV: ${{ matrix.PYTHON.TOXENV }}

#       - uses: ./.github/actions/upload-coverage

#   windows:
#     runs-on: windows-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         WINDOWS:
#           - { ARCH: 'x86', WINDOWS: 'win32', CONFIG: 'VC-WIN32' }
#           - { ARCH: 'x64', WINDOWS: 'win64', CONFIG: 'VC-WIN64A' }
#         PYTHON:
#           - {VERSION: "3.6", TOXENV: "py36", TONGSUO: {VERSION: "8.3.2"}}
#           - {VERSION: "3.11", TOXENV: "py311", TONGSUO: {VERSION: "8.3.2"}}
#         JOB_NUMBER: [0, 1, 2]
#     name: "${{ matrix.PYTHON.TOXENV }} tongsuo-${{ matrix.PYTHON.TONGSUO.VERSION }} on ${{ matrix.WINDOWS.WINDOWS }} (part ${{ matrix.JOB_NUMBER }})"
#     timeout-minutes: 15
#     steps:
#       - uses: actions/checkout@v3.1.0
#         timeout-minutes: 3
#         with:
#           persist-credentials: false
#       - run: choco install -y winrar
#       - uses: ilammy/msvc-dev-cmd@v1
#         with:
#           arch: ${{ matrix.WINDOWS.WINDOWS }}
#       - uses: ilammy/setup-nasm@v1
#         with:
#           platform: ${{ matrix.WINDOWS.WINDOWS }}
#       - uses: shogo82148/actions-setup-perl@v1
#       - name: Setup python
#         id: setup-python
#         uses: actions/setup-python@v4.3.0
#         with:
#           python-version: ${{ matrix.PYTHON.VERSION }}
#           architecture: ${{ matrix.WINDOWS.ARCH }}
#       - run: python -m pip install tox coverage[toml]
#       - name: Export env
#         shell: bash
#         run: |
#           echo "TONGSUO_VERSION=${VERSION}" >> $GITHUB_ENV
#           echo "TONGSUO_HOME=${GITHUB_WORKSPACE}\tongsuo${VERSION}" >> $GITHUB_ENV
#         env:
#           VERSION: ${{ matrix.PYTHON.TONGSUO.VERSION }}
#       - name: Download Tongsuo source
#         run: |
#           wget "https://github.com/Tongsuo-Project/Tongsuo/archive/refs/tags/${env:TONGSUO_VERSION}.tar.gz" -OutFile "${env:TONGSUO_VERSION}.tar.gz"
#         shell: powershell
#       - run: '"C:\Program Files\WinRAR\WinRAR.exe" -INUL x ${{ matrix.PYTHON.TONGSUO.VERSION }}.tar.gz'
#         shell: cmd
#       - name: Build custom Tongsuo
#         shell: cmd
#         run: |
#           pushd "Tongsuo-${{ matrix.PYTHON.TONGSUO.VERSION }}"
#           mkdir _build
#           pushd _build
#           perl ..\Configure no-makedepend no-shared ${{ matrix.WINDOWS.CONFIG }} --prefix=%TONGSUO_HOME%
#           nmake /S
#           nmake install_sw
#           popd
#           popd
#       - name: Tests
#         run: |
#           python3 -c "import sys; print(sys.platform);"
#           tox -vvv -r --  --color=yes --num-shards=3 --shard-id=${{ matrix.JOB_NUMBER }}
#         env:
#           TOXENV: ${{ matrix.PYTHON.TOXENV }}

#       - uses: ./.github/actions/upload-coverage

#   all-green:
#     # https://github.community/t/is-it-possible-to-require-all-github-actions-tasks-to-pass-without-enumerating-them/117957/4?u=graingert
#     runs-on: ubuntu-latest
#     needs: [linux, macos, windows]
#     if: ${{ always() }}
#     steps:
#       - uses: actions/checkout@v3.1.0
#         timeout-minutes: 3
#         with:
#           persist-credentials: false
#       - name: Decide whether the needed jobs succeeded or failed
#         uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe
#         with:
#           jobs: ${{ toJSON(needs) }}
#       - name: Setup python
#         if: ${{ always() }}
#         uses: actions/setup-python@v4.3.0
#         with:
#           python-version: '3.10'
#       - run: pip install coverage[toml]
#         if: ${{ always() }}
#       - name: Download coverage data
#         if: ${{ always() }}
#         uses: actions/download-artifact@v3.0.1
#         with:
#           name: coverage-data
#       - name: Combine coverage and fail if it's <85%.
#         if: ${{ always() }}
#         id: combinecoverage
#         run: |
#           set +e
#           python -m coverage combine
#           echo "## Python Coverage" >> $GITHUB_STEP_SUMMARY
#           python -m coverage report -m --fail-under=85 > COV_REPORT
#           COV_EXIT_CODE=$?
#           cat COV_REPORT
#           if [ $COV_EXIT_CODE -ne 0 ]; then
#             echo "ðŸš¨ Python Coverage failed. Under 85" | tee -a $GITHUB_STEP_SUMMARY
#           fi
#           echo '```' >> $GITHUB_STEP_SUMMARY
#           cat COV_REPORT >> $GITHUB_STEP_SUMMARY
#           echo '```' >> $GITHUB_STEP_SUMMARY
#           exit $COV_EXIT_CODE
#       - name: Create coverage HTML
#         run: python -m coverage html
#         if: ${{ failure() && steps.combinecoverage.outcome == 'failure' }}
#       - name: Upload HTML report.
#         uses: actions/upload-artifact@v3.1.1
#         with:
#           name: _html-report
#           path: htmlcov
#           if-no-files-found: ignore
#         if: ${{ failure() && steps.combinecoverage.outcome == 'failure' }}
